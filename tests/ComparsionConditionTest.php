<?php
namespace RecordsMan\Tests;
use RecordsMan\ComparsionCondition;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-24 at 20:33:20.
 */
class ComparsionConditionTest extends \PHPUnit_Framework_TestCase
{
    /** @var ComparsionCondition $eqCondition */
    protected $eqCondition;
    /** @var ComparsionCondition $noteqCondition */
    protected $noteqCondition;
    /** @var ComparsionCondition $gtCondition */
    protected $gtCondition;
    /** @var ComparsionCondition $ltCondition */
    protected $ltCondition;
    /** @var ComparsionCondition $gteqCondition */
    protected $gteqCondition;
    /** @var ComparsionCondition $lteqCondition */
    protected $lteqCondition;
    /** @var ComparsionCondition $likeCondition */
    protected $likeCondition;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->eqCondition = ComparsionCondition::create('a = 10');
        $this->noteqCondition = ComparsionCondition::create('a ! 10');
        $this->gtCondition = ComparsionCondition::create('a > 10');
        $this->ltCondition = ComparsionCondition::create('a < 10');
        $this->gteqCondition = ComparsionCondition::create('a >= 10');
        $this->lteqCondition = ComparsionCondition::create('a <= 10');
        $this->likeCondition = ComparsionCondition::create('a ~ test%');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers RecordsMan\ComparsionCondition::compile
     */
    public function testCompile()
    {
        $this->assertEquals('(`a`=10)', $this->eqCondition->compile());
        $this->assertEquals('(`a`<>10)', $this->noteqCondition->compile());
        $this->assertEquals('(`a`>10)', $this->gtCondition->compile());
        $this->assertEquals('(`a`<10)', $this->ltCondition->compile());
        $this->assertEquals('(`a`>=10)', $this->gteqCondition->compile());
        $this->assertEquals('(`a`<=10)', $this->lteqCondition->compile());
        $this->assertEquals("(`a` LIKE 'test%')", $this->likeCondition->compile());
    }

    /**
     * @covers RecordsMan\ComparsionCondition::test
     */
    public function testTest()
    {
        $this->assertTrue($this->eqCondition->test(['a' => 10]));
        $this->assertFalse($this->eqCondition->test(['a' => 11]));
        $this->assertFalse($this->eqCondition->test(['a' => 9]));

        $this->assertFalse($this->noteqCondition->test(['a' => 10]));
        $this->assertTrue($this->noteqCondition->test(['a' => 11]));
        $this->assertTrue($this->noteqCondition->test(['a' => 9]));

        $this->assertFalse($this->gtCondition->test(['a' => 10]));
        $this->assertTrue($this->gtCondition->test(['a' => 11]));
        $this->assertFalse($this->gtCondition->test(['a' => 9]));

        $this->assertFalse($this->ltCondition->test(['a' => 10]));
        $this->assertFalse($this->ltCondition->test(['a' => 11]));
        $this->assertTrue($this->ltCondition->test(['a' => 9]));

        $this->assertTrue($this->gteqCondition->test(['a' => 10]));
        $this->assertTrue($this->gteqCondition->test(['a' => 11]));
        $this->assertFalse($this->gteqCondition->test(['a' => 9]));

        $this->assertTrue($this->lteqCondition->test(['a' => 10]));
        $this->assertFalse($this->lteqCondition->test(['a' => 11]));
        $this->assertTrue($this->lteqCondition->test(['a' => 9]));

        $this->assertTrue($this->likeCondition->test(['a' => 'test']));
        $this->assertTrue($this->likeCondition->test(['a' => 'Testing like condition']));
        $this->assertFalse($this->likeCondition->test(['a' => ' test']));
        $this->assertFalse($this->likeCondition->test(['a' => '']));
    }
}
