<?php
namespace RecordsMan;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-24 at 20:33:20.
 */
class ConditionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Condition
     */
    protected $condition;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->condition = Condition::createOrBlock([
            'id >= 10',
            'name ~ jo%',
            Condition::createAndBlock([
                'range > 10', 'range < 20'
            ])
        ]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers RecordsMan\Condition::create
     */
    public function testCreate()
    {
        $this->assertInstanceOf('\RecordsMan\BoolCondition', Condition::create(['a = 5']));
        $this->assertInstanceOf('\RecordsMan\BoolCondition', Condition::create(
            ['a = 5', 'b = 10'],
            Condition::OPERATOR_OR
        ));
        $this->assertInstanceOf('\RecordsMan\ComparsionCondition', Condition::create('a = 5'));
        $this->assertInstanceOf('\RecordsMan\ComparsionCondition', Condition::create('a > 5'));
        $this->assertInstanceOf('\RecordsMan\ComparsionCondition', Condition::create('a < 5'));
        $this->assertInstanceOf('\RecordsMan\ComparsionCondition', Condition::create('a >= 5'));
        $this->assertInstanceOf('\RecordsMan\ComparsionCondition', Condition::create('a <= 5'));
        $this->assertInstanceOf('\RecordsMan\ComparsionCondition', Condition::create('a ! 5'));
        $this->assertInstanceOf('\RecordsMan\ComparsionCondition', Condition::create("title ~ ' test%'"));
        $this->assertInstanceOf('\RecordsMan\PureSqlCondition', Condition::create('`a` = UPPER(`b`)'));
    }

    /**
     * @covers RecordsMan\Condition::createAndBlock
     */
    public function testCreateAndBlock()
    {
        $andCondition = Condition::createAndBlock(['a=5', 'b=10']);
        $this->assertInstanceOf('\RecordsMan\BoolCondition', $andCondition);
        $this->assertRegExp('/\s+AND\s+/', $andCondition->toSql());
    }

    /**
     * @covers RecordsMan\Condition::createOrBlock
     */
    public function testCreateOrBlock()
    {
        $orCondition = Condition::createOrBlock(['a=5', 'b=10']);
        $this->assertInstanceOf('\RecordsMan\BoolCondition', $orCondition);
        $this->assertRegExp('/\s+OR\s+/', $orCondition->toSql());
    }

    /**
     * @covers RecordsMan\Condition::toSql
     */
    public function testToSql()
    {
        $this->assertEquals($this->condition->compile(), $this->condition->toSql());
    }

    /**
     * @covers RecordsMan\Condition::__toString
     */
    public function test__toString()
    {
        $this->assertEquals($this->condition->compile(), $this->condition);
    }

    /**
     * @covers RecordsMan\Condition::compile
     */
    public function testCompile()
    {
        $this->assertEquals(
            $this->condition->compile(),
            "((`id`>=10) OR (`name` LIKE 'jo%') OR ((`range`>10) AND (`range`<20)))"
        );
    }

    /**
     * @covers RecordsMan\Condition::test
     */
    public function testTest()
    {
        $this->assertTrue($this->condition->test(['id' => 9, 'name' => 'ivan', 'range' => 15]));
        $this->assertTrue($this->condition->test(['id' => 9, 'name' => 'john', 'range' => 9]));
        $this->assertTrue($this->condition->test(['id' => 10, 'name' => 'ivan', 'range' => 25]));
        $this->assertFalse($this->condition->test(['id' => 9, 'name' => 'ivan', 'range' => 25]));
    }
}
