<?php
namespace RecordsMan;
require_once __DIR__ . DIRECTORY_SEPARATOR . 'DBConnected_TestCase.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-24 at 20:33:20.
 */
class RecordTest extends DBConnected_TestCase
{

    /**
     * @covers RecordsMan\Record::load
     */
    public function testLoad()
    {
        $item = \Test\Item::load(1);
        $this->assertEquals($item->title, 'Item7 (top level)');
        $this->setExpectedException('RecordsMan\RecordsManException', '', 1);
        $failed = \Test\Item::load('not_an_id');
    }

    /**
     * @covers RecordsMan\Record::create
     */
    public function testCreate()
    {
        $item = \Test\Item::create(['title' => 'New item']);
        $this->assertEquals($item->title, 'New item');
    }

    /**
     * @covers RecordsMan\Record::find
     */
    public function testFind()
    {
        $condition = Condition::create('title ~ item%');
        $itemsSet = \Test\Item::find($condition, 'title', [0, 5]);
        $this->assertInstanceOf('\RecordsMan\RecordSet', $itemsSet);
        $this->assertEquals(5, $itemsSet->count());
        foreach($itemsSet as $item) {
            $this->assertTrue($item->isMatch($condition));
        }
    }

    /**
     * @covers RecordsMan\Record::all
     */
    public function testAll()
    {
        $this->assertEquals(7, \Test\Item::all()->count());
    }

    /**
     * @covers RecordsMan\Record::findFirst
     */
    public function testFindFirst()
    {
        $existingItem = \Test\Item::findFirst('id!0', ['id' => 'DESC']);
        $unexistingItem = \Test\Item::findFirst('id>70');
        $this->assertInstanceOf('\RecordsMan\Record', $existingItem);
        $this->assertEquals(7, $existingItem->id);
        $this->assertNull($unexistingItem);
    }

    /**
     * @covers RecordsMan\Record::_select
     */
    public function test_select()
    {
        $condition = Condition::create(['id>0', 'title ~ item%'], 'id');
        $rows = \Test\Item::_select($condition);
        $this->assertInternalType('array', $rows);
        $this->assertEquals(7, count($rows));
        $this->assertEquals(1, $rows[0]['id']);
    }

    /**
     * @covers RecordsMan\Record::callTrigger
     */
    public function testCallTrigger()
    {
        $testClass = $this;
        $trigger1WasCalled = false;
        $trigger2WasCalled = false;
        $trigger3WasCalled = false;
        \Test\Item::addTrigger('testTrigger', function() use ($testClass, &$trigger1WasCalled) {
            $trigger1WasCalled = true;
            $testClass->assertInstanceOf('\Test\Item', $this);
            $testClass->assertEquals('test item', $this->title);
        });
        \Test\Item::addTrigger('testTrigger', function() use ($testClass, &$trigger2WasCalled) {
            $trigger2WasCalled = true;
            return false;
        });
        \Test\Item::addTrigger('testTrigger', function() use ($testClass, &$trigger3WasCalled) {
            $trigger3WasCalled = true;
        });
        $item = \Test\Item::create(['title' => 'test item']);
        $this->assertFalse($trigger1WasCalled);
        $item->callTrigger('testTrigger');
        $this->assertTrue($trigger1WasCalled);
        $this->assertTrue($trigger2WasCalled);
        $this->assertFalse($trigger3WasCalled);
    }

    /**
     * @covers RecordsMan\Record::get
     */
    public function testGet()
    {
        $existingItem = \Test\Item::findFirst('id!0', ['id' => 'DESC']);
        $this->assertEquals(7, $existingItem->get('id'));
        //TODO: unexisting fields getting
    }

    /**
     * @covers RecordsMan\Record::set
     */
    public function testSet()
    {
        $existingItem = \Test\Item::findFirst('id!0', ['id' => 'DESC']);
        $existingItem->set(['title' => 'Changed title', 'subitems_count' => 0]);
        $this->assertTrue($existingItem->isMatch(['title = Changed title', 'subitems_count=0']));
        $existingItem->set('title', 'test');
        $this->assertEquals('test', $existingItem->title);
        $this->setExpectedException('RecordsMan\RecordsManException', '', 70);
        $existingItem->set('id', 20);
        //TODO: unexisting fields setting
    }

    /**
     * @covers RecordsMan\Record::hasOwnField
     */
    public function testHasOwnField()
    {
        $item = \Test\Item::create();
        $this->assertTrue($item->hasOwnField('title'));
        $this->assertFalse($item->hasOwnField('price'));
    }

    /**
     * @covers RecordsMan\Record::toArray
     */
    public function testToArray()
    {
        $item = \Test\Item::create(['title' => 'new item']);
        $asArray = $item->toArray();
        $this->assertInternalType('array', $asArray);
        $this->assertEquals('new item', $asArray['title']);
    }

    /**
     * @covers RecordsMan\Record::isMatch
     */
    public function testIsMatch()
    {
        $item = \Test\Item::create(['title' => "new' item"]);
        $this->assertTrue($item->isMatch("title ~ 'new'%'"));
    }

    /**
     * @covers RecordsMan\Record::reload
     */
    public function testReload()
    {
        $item = \Test\Item::findFirst('id!0', ['id' => 'DESC']);
        $item->title = 'Changed title';
        $item->reload();
        $this->assertEquals('Item1 (top level)', $item->title);
    }

    /**
     * @covers RecordsMan\Record::getRelationTypeWith
     */
    public function testGetRelationTypeWith()
    {
        $item = \Test\Item::create();
        $subItem = \Test\SubItem::create();
        $this->assertEquals(Record::RELATION_MANY, $item->getRelationTypeWith('\Test\SubItem'));
        $this->assertEquals(Record::RELATION_NONE, $item->getRelationTypeWith('\Test\SubSubItem'));
        $this->assertEquals(Record::RELATION_BELONGS, $subItem->getRelationTypeWith('\Test\Item'));
        $this->assertEquals(Record::RELATION_MANY, $item->getRelationTypeWith($subItem));
        $this->assertEquals(Record::RELATION_BELONGS, $subItem->getRelationTypeWith($item));
    }

    /**
     * @covers RecordsMan\Record::getRelationParamsWith
     */
    public function testGetRelationParamsWith()
    {
        $item = \Test\Item::load(1);
        $relationParams = $item->getRelationParamsWith('\Test\SubItem');
        $this->assertEquals('item_id', $relationParams['foreignKey']);
        //TODO: another params checking
    }

    /**
     * @covers RecordsMan\Record::loadForeign
     */
    public function testLoadForeign()
    {
        $item = \Test\Item::load(1);
        $children = $item->loadForeign('\Test\Item');
        $this->assertEquals(2, $children->count());
        foreach($children as $child) {
            $this->assertEquals($item->id, $child->parent_id);
        }
        $subitems = $item->loadForeign('\Test\SubItem');
        $this->assertEquals(2, $subitems->count());
        foreach($subitems as $subitem) {
            $this->assertEquals(
                $item->id,
                $subitem->get($subitem->getRelationParamsWith('\Test\Item')['foreignKey'])
            );
        }
        // Extra condition checking
        $item3 = \Test\Item::load(3);
        $this->assertEquals(1, $item3->itemsRelations->count());
        $this->assertEquals(4, $item3->itemsRelations[0]->id);
        $this->assertEquals('one', $item3->itemsRelations[0]->extra);
        // many-to-many relation checking
        $relatedItems = $item->relatedItems;
        $this->assertTrue(count($relatedItems) == 2);
        $this->assertEquals($relatedItems[0]->id, 2);
        $this->assertEquals($relatedItems[1]->id, 4);
        $relatedItems = $item3->relatedItems;
        $this->assertEquals(1, $relatedItems->count());
    }

    /**
     * @covers RecordsMan\Record::__get
     */
    public function test__get()
    {
        $item = \Test\Item::create(['title' => 'test']);
        $this->assertEquals('test', $item->title);
    }

    /**
     * @covers RecordsMan\Record::__set
     * @todo   Implement test__set().
     */
    public function test__set()
    {
        $item = \Test\Item::create();
        $item->title = 'test';
        $this->assertEquals('test', $item->title);
        $this->setExpectedException('RecordsMan\RecordsManException', '', 70);
        $item->id = 20;
    }

    /**
     * @covers RecordsMan\Record::getMetaData
     */
    public function testGetMetaData()
    {
        $this->assertEquals('test_items', \Test\Item::getMetaData()['tableName']);
    }

    /**
     * @covers RecordsMan\Record::_fromArray
     */
    public function test_fromArray()
    {
        $item = \Test\Item::_fromArray([
            'id' => 20,
            'title' => 'test'
        ]);
        $this->assertInstanceOf('\Test\Item', $item);
        $this->assertEquals(20, $item->id);
        $this->assertEquals('test', $item->title);
    }

    /**
     * @covers RecordsMan\Record::save
     */
    public function testSave()
    {
        // Adding new one test
        $item = \Test\Item::create([
            'title' => 'new test item',
            'parent_id' => 1
        ]);
        $itemsCount = \Test\Item::all()->count();
        $firstItem = \Test\Item::load(1);
        $childrenBefore = $firstItem->children_count;
        $this->assertEquals(null, $item->id);
        $item->save();
        $this->assertEquals(8, $item->id);
        $this->assertEquals($itemsCount + 1, \Test\Item::all()->count());

        // Counters updating test
        $subitemsCount = $firstItem->subitems_count;
        $newId = \Test\SubItem::create([
            'title' => 'new test subitem',
            'item_id' => 1
        ])->save()->get('id');
        $firstItem->reload();
        $this->assertEquals($childrenBefore + 1, $firstItem->children_count);
        $this->assertEquals($subitemsCount + 1, $firstItem->subitems_count);

        // Updating test
        $newItem = \Test\SubItem::load($newId);
        $this->assertEquals('new test subitem', $newItem->title);
        $newItem->set('title', 'updated title')->save();
        $newItem = \Test\SubItem::load($newId);
        $this->assertEquals('updated title', $newItem->title);

        // Broken foreign key test
        $topLevelItem = \Test\Item::create([
            'title' => 'top-level item',
            'parent_id' => 0
        ]);
        $topLevelItem->save();
        $this->assertTrue($topLevelItem->id > 0);
        $brokenItem = \Test\SubSubItem::create([
            'title' => 'broken item',
            'subitem_id' => 100
        ]);
        $brokenItem->save(false);
        $this->assertTrue($brokenItem->id > 0);
        $brokenItem->drop();
        $this->setExpectedException('RecordsMan\RecordsManException', '', 85);
        $brokenItem->save();

        //TODO: relation checking, autofill datetime fields, etc.
    }

    /**
     * @covers RecordsMan\Record::drop
     */
    public function testDrop()
    {
        // Drop only test
        $itemsCount = \Test\Item::all()->count();
        $item = \Test\Item::load(8);
        $item->drop();
        $this->assertEquals('new test item', $item->title);
        $this->assertTrue(!$item->id);
        $this->assertEquals($itemsCount - 1, \Test\Item::all()->count());

        // Auto-counting test
        $subitem = \Test\SubItem::load(1);
        $parentItem = $subitem->item;
        $countBefore = $parentItem->subitems_count;
        $subitem->drop();
        $parentItem->reload();
        $this->assertEquals($countBefore - 1, $parentItem->subitems_count);

        // Related item deleting test
        $this->assertFalse(\Test\SubItem::find('item_id = 2')->isEmpty());
        $this->assertFalse(\Test\Item::find('parent_id = 2')->isEmpty());
        \Test\Item::load(2)->drop();
        $this->assertTrue(\Test\SubItem::find('item_id = 2')->isEmpty());
        $this->assertTrue(\Test\Item::find('parent_id = 2')->isEmpty());
    }
}
